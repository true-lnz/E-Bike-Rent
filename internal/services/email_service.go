package services

import (
	"E-Bike-Rent/internal/config"
	"E-Bike-Rent/internal/dto"
	"fmt"

	"gopkg.in/gomail.v2"
)

func SendVerificationCode(to string, code string, cfg *config.Config) error {
	m := gomail.NewMessage()
	m.SetAddressHeader("From", cfg.SMTP.User, cfg.SMTP.From)
	m.SetHeader("To", to)
	m.SetHeader("Subject", "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

	body := fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f9f9f9;
					padding: 20px;
					color: #333;
				}
				.container {
					background-color: #fff;
					border-radius: 8px;
					box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
					padding: 20px;
					max-width: 500px;
					margin: auto;
				}
				.code {
					font-size: 24px;
					font-weight: bold;
					color: #2c3e50;
					background: #f0f0f0;
					padding: 10px 20px;
					display: inline-block;
					border-radius: 6px;
					margin-top: 10px;
				}
				.footer {
					margin-top: 30px;
					font-size: 12px;
					color: #888;
				}
			</style>
		</head>
		<body>
			<div class="container">
				<h2>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
				<p>–í—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤—Ö–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:</p>
				<div class="code">%s</div>
				<p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
				<div class="footer">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´–§—É–ª–ì–∞–∑¬ª</div>
			</div>
		</body>
		</html>
	`, code)

	m.SetBody("text/html", body)
	d := gomail.NewDialer(cfg.SMTP.Host, cfg.SMTP.Port, cfg.SMTP.User, cfg.SMTP.Password)
	return d.DialAndSend(m)
}

func SendAdminMaintenanceCreate(bicycleName string, details string, cfg *config.Config) error {
	m := gomail.NewMessage()
	m.SetAddressHeader("From", cfg.SMTP.User, cfg.SMTP.From)
	m.SetHeader("To", cfg.SMTP.User)
	m.SetHeader("Subject", fmt.Sprintf("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: %s", bicycleName))

	body := fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f4;
					padding: 20px;
					color: #333;
				}
				.container {
					background-color: #fff;
					border-radius: 8px;
					box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
					padding: 20px;
					max-width: 600px;
					margin: auto;
				}
				.title {
					font-size: 24px;
					color: #2c3e50;
					margin-bottom: 20px;
				}
				.section {
					margin-bottom: 15px;
				}
				.label {
					font-weight: bold;
					color: #555;
				}
				.details {
					background-color: #f9f9f9;
					border-left: 4px solid #2980b9;
					padding: 10px 15px;
					border-radius: 4px;
					white-space: pre-wrap;
				}
				.footer {
					margin-top: 30px;
					font-size: 12px;
					color: #888;
				}
			</style>
		</head>
		<body>
			<div class="container">
				<div class="title">–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</div>

				<div class="section">
					<span class="label">–í–µ–ª–æ—Å–∏–ø–µ–¥:</span>
					<span><strong>%s</strong></span>
				</div>

				<div class="section">
					<span class="label">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</span>
					<div class="details">%s</div>
				</div>

				<div class="footer">
					–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
				</div>
			</div>
		</body>
		</html>
	`, bicycleName, details)

	m.SetBody("text/html", body)
	d := gomail.NewDialer(cfg.SMTP.Host, cfg.SMTP.Port, cfg.SMTP.User, cfg.SMTP.Password)
	return d.DialAndSend(m)
}

func SendMaintenanceStatusUpdate(to string, bicycleName string, newStatus string, cfg *config.Config) error {
	m := gomail.NewMessage()
	m.SetAddressHeader("From", cfg.SMTP.User, cfg.SMTP.From)
	m.SetHeader("To", to)
	m.SetHeader("Subject", fmt.Sprintf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ ¬´%s¬ª", bicycleName))

	body := fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f4;
					padding: 20px;
					color: #333;
				}
				.container {
					background-color: #fff;
					border-radius: 8px;
					box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
					padding: 20px;
					max-width: 500px;
					margin: auto;
				}
				.status {
					font-size: 20px;
					font-weight: bold;
					color: #2980b9;
					background: #eef2f7;
					padding: 10px 20px;
					display: inline-block;
					border-radius: 6px;
					margin-top: 10px;
				}
				.footer {
					margin-top: 30px;
					font-size: 12px;
					color: #888;
				}
			</style>
		</head>
		<body>
			<div class="container">
				<h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏</h2>
				<p>–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç!</p>
				<p>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ <strong>¬´%s¬ª</strong> –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω.</p>
				<p>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</p>
				<div class="status">%s</div>
				<p>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!</p>
				<div class="footer">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´–§—É–ª–ì–∞–∑¬ª</div>
			</div>
		</body>
		</html>
	`, bicycleName, newStatus)

	m.SetBody("text/html", body)
	d := gomail.NewDialer(cfg.SMTP.Host, cfg.SMTP.Port, cfg.SMTP.User, cfg.SMTP.Password)
	return d.DialAndSend(m)
}

func SendFeedbackLetter(request dto.FeedbackRequest, cfg *config.Config) error {
	m := gomail.NewMessage()
	m.SetAddressHeader("From", cfg.SMTP.User, cfg.SMTP.From)
	m.SetHeader("To", cfg.SMTP.User)
	m.SetHeader("Subject", "üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	body := fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<style>
				body {
					font-family: Arial, sans-serif;
					background-color: #f4f4f4;
					padding: 20px;
					color: #333;
				}
				.container {
					background-color: #fff;
					border-radius: 8px;
					box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
					padding: 20px;
					max-width: 500px;
					margin: auto;
				}
				.label {
					font-weight: bold;
				}
				.footer {
					margin-top: 30px;
					font-size: 12px;
					color: #888;
				}
			</style>
		</head>
		<body>
			<div class="container">
				<h2>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</h2>
				<p><span class="label">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</span> %s</p>
				<p><span class="label">–°–æ–æ–±—â–µ–Ω–∏–µ:</span></p>
				<p style="white-space: pre-wrap;">%s</p>
				<div class="footer">–≠—Ç–æ –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</div>
			</div>
		</body>
		</html>
	`, request.PhoneNumber, request.Text)

	m.SetBody("text/html", body)

	d := gomail.NewDialer(cfg.SMTP.Host, cfg.SMTP.Port, cfg.SMTP.User, cfg.SMTP.Password)
	return d.DialAndSend(m)
}
