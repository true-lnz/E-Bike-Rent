import {
	Button,
	Group,
	Modal,
	Stack,
	Text,
} from "@mantine/core";

import { showNotification } from "@mantine/notifications";
import { IconCheck, IconX } from "@tabler/icons-react";
import { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { sendFeedback } from "../../services/feedbackService";
import AccessorySelectCardList from "./AccessorySelectCardList";

interface Props {
	opened: boolean;
	onClose: () => void;
	rentId?: number;
	initialAccessoryIds?: number[]; // –Ω–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å "—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ"
}

export default function AccessoryModal({
	opened,
	onClose,
	rentId,
	initialAccessoryIds = [],
}: Props) {
	const { user } = useAuth();
	const [selected, setSelected] = useState<number[]>([]);
	const [submitting, setSubmitting] = useState(false);
	const [successModalOpen, setSuccessModalOpen] = useState(false);

	useEffect(() => {
		if (opened) {
			setSelected(initialAccessoryIds);
		} else {
			setSelected([]);
			setSuccessModalOpen(false);
		}
	}, [opened, initialAccessoryIds]);

	const handleSubmit = async () => {
		if (!user) {
			showNotification({
				title: "–û—à–∏–±–∫–∞",
				message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
				color: "red",
				radius: 'md',
				icon: <IconX size={16} />,
			});
			return;
		}

		const hasNewSelection = selected.some(id => !initialAccessoryIds.includes(id));

		if (!hasNewSelection) {
			showNotification({
				title: "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–æ–≤—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
				message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–æ–≤—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä",
				color: "red",
				radius: 'md',
				icon: <IconX size={16} />,
			});
			return;
		}

		setSubmitting(true);

		const fullName = `${user.last_name} ${user.first_name} ${user.patronymic}`;
		const text = `
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∫ –∞—Ä–µ–Ω–¥–µ ‚Ññ${rentId}

üë§ –§–ò–û: ${fullName}
üìß Email: ${user.email}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}
üõ† –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã (ID): ${selected.join(", ") || "‚Äî"}
`.trim();

		try {
			const response = await sendFeedback({
				phoneNumber: user.phone_number,
				text,
			});

			if (!response.error) {
				showNotification({
					title: "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
					message: "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
					color: "green",
					radius: 'md',
					icon: <IconCheck size={16} />,
				});
				setSuccessModalOpen(true);
			} else {
				throw new Error(response.error);
			}
		} catch (error) {
			showNotification({
				title: "–û—à–∏–±–∫–∞",
				radius: 'md',
				message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
				color: "red",
				icon: <IconX size={16} />,
			});
			window.scrollTo({ top: 0, behavior: "smooth" });
		} finally {
			setSubmitting(false);
		}
	};

	return (
		<>
			<Modal
				opened={opened}
				onClose={onClose}
				title="–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"
				size="lg"
				radius="lg"
				centered
			>
				<Stack gap="md" my="4">
					<AccessorySelectCardList
						selectedAccessories={selected}
						lockedAccessories={initialAccessoryIds}
						onChangeSelected={setSelected}
					/>
					<Group mt="sm" align="end" gap="xs" justify="flex-end">
						<Button variant="default" onClick={onClose} radius="md" disabled={submitting}>
							–û—Ç–º–µ–Ω–∞
						</Button>
						<Button
							onClick={handleSubmit}
							loading={submitting}
							radius="md"
							disabled={selected.length === 0 || submitting}
						>
							–í—ã–±—Ä–∞—Ç—å
						</Button>
					</Group>
				</Stack>
			</Modal>

			<Modal
				opened={successModalOpen}
				onClose={() => {
					setSuccessModalOpen(false);
					onClose();
				}}
				title="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
				centered
				size="sm"
				radius="lg"
				withCloseButton={false}
			>
				<Text>–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</Text>
				<Button
					fullWidth
					mt="md"
					radius="md"
					onClick={() => {
						setSuccessModalOpen(false);
						onClose();
					}}
				>
					–ó–∞–∫—Ä—ã—Ç—å
				</Button>
			</Modal>
		</>
	);
}