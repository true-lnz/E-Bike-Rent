import {
	Button,
	Group,
	Modal,
	NumberInput,
	Stack,
} from "@mantine/core";
import { showNotification } from "@mantine/notifications";
import { IconCheck, IconX } from "@tabler/icons-react";

import { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { sendFeedback } from "../../services/feedbackService";

interface Props {
	opened: boolean;
	onClose: () => void;
	rentId?: number;
}

export default function ExtendRentalModal({ opened, onClose, rentId }: Props) {
	const { user } = useAuth();
	const [days, setDays] = useState<number | ''>('');
	const [submitting, setSubmitting] = useState(false);
	const [successModalOpen, setSuccessModalOpen] = useState(false);

	useEffect(() => {
		if (!opened) {
			setDays('');
			setSuccessModalOpen(false);
		}
	}, [opened]);

	const handleSubmit = async () => {
		if (!user) {
			showNotification({
				title: "–û—à–∏–±–∫–∞",
				message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
				color: "red",
				radius: 'md',
				icon: <IconX size={16} />,
			});
			return;
		}

		if (!days || days <= 0) {
			showNotification({
				title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
				message: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π",
				color: "red",
				radius: 'md',
				icon: <IconX size={16} />,
			});
			return;
		}

		setSubmitting(true);

		const fullName = `${user.last_name} ${user.first_name} ${user.patronymic}`;
		const text = `
			–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã ‚Ññ${rentId}

			üë§ –§–ò–û: ${fullName}
			üìß Email: ${user.email}
			üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}
			üìÖ –ñ–µ–ª–∞–µ–º–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${days} ${days === 1 ? '–¥–µ–Ω—å' : (days >= 2 && days <= 4 ? '–¥–Ω—è' : '–¥–Ω–µ–π')}
			`.trim();

		try {
			const response = await sendFeedback({
				phoneNumber: user.phone_number,
				text,
			});

			if (!response.error) {
				showNotification({
					title: "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
					message: "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã",
					color: "green",
					radius: 'md',
					icon: <IconCheck size={16} />,
				});
				setSuccessModalOpen(true);
			} else {
				throw new Error(response.error);
			}
		} catch (error) {
			showNotification({
				title: "–û—à–∏–±–∫–∞",
				radius: 'md',
				message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
				color: "red",
				icon: <IconX size={16} />,
			});
		} finally {
			setSubmitting(false);
		}
	};

	return (
		<>
			<Modal opened={opened} onClose={onClose} title="–ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É" size="lg" radius="lg" centered>
				<Stack gap="md">
					<NumberInput
						label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
						placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 3"
						min={1}
						value={days}
						onChange={(value) => setDays(typeof value === "number" ? value : '')}
					/>
					<Group mt="sm" align="end" gap="xs" justify="flex-end">
						<Button variant="default" onClick={onClose} radius="md" disabled={submitting}>
							–û—Ç–º–µ–Ω–∞
						</Button>
						<Button
							onClick={handleSubmit}
							loading={submitting}
							radius="md"
							disabled={!days || submitting}
						>
							–ü—Ä–æ–¥–ª–∏—Ç—å
						</Button>
					</Group>
				</Stack>
			</Modal>

			<Modal
				opened={successModalOpen}
				onClose={() => {
					setSuccessModalOpen(false);
					onClose();
				}}
				title="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
				centered
				size="sm"
				radius="lg"
				withCloseButton={false}
			>
				<Stack>
					<p>–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.</p>
					<Button
						fullWidth
						mt="md"
						radius="md"
						onClick={() => {
							setSuccessModalOpen(false);
							onClose();
						}}
					>
						–ó–∞–∫—Ä—ã—Ç—å
					</Button>
				</Stack>
			</Modal>
		</>
	);
}
